// <auto-generated />
using CatalogoAutomotivo.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatalogoAutomotivo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240425032116_startup")]
    partial class startup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatalogoAutomotivo.MER.Alimentacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TipoAlimentacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Alimentacao");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Aspiracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TipoAspiracao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aspiracao");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Carro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlimentacaoId")
                        .HasColumnType("int");

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("int");

                    b.Property<int>("AspiracaoId")
                        .HasColumnType("int");

                    b.Property<int>("AutonomiaRodoviaria")
                        .HasColumnType("int");

                    b.Property<int>("AutonomiaUrbana")
                        .HasColumnType("int");

                    b.Property<int>("CapacidadeCombustivel")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("CombustivelId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumoRodoviario")
                        .HasColumnType("int");

                    b.Property<int>("ConsumoUrbano")
                        .HasColumnType("int");

                    b.Property<int>("FabricanteId")
                        .HasColumnType("int");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreioDianteiro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreioTraseiro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OleoMotor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Peso")
                        .HasColumnType("int");

                    b.Property<string>("PneusDianteiros")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PneusTraseiros")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Potencia")
                        .HasColumnType("int");

                    b.Property<int>("PrecoTabela")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeLugares")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadePortas")
                        .HasColumnType("int");

                    b.Property<int>("RotacaoMaxima")
                        .HasColumnType("int");

                    b.Property<int>("TracaoId")
                        .HasColumnType("int");

                    b.Property<int>("TransmissaoId")
                        .HasColumnType("int");

                    b.Property<int>("VelocidadeMaxima")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlimentacaoId");

                    b.HasIndex("AspiracaoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CombustivelId");

                    b.HasIndex("FabricanteId");

                    b.HasIndex("TracaoId");

                    b.HasIndex("TransmissaoId");

                    b.ToTable("Carro");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeCategoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Combustivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeCombustivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Combustivel");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Fabricante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataFundacao")
                        .HasColumnType("int");

                    b.Property<string>("Fundador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sede")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fabricante");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Tracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TipoTracao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tracao");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Transmissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TipoTransmissao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transmissao");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Carro", b =>
                {
                    b.HasOne("CatalogoAutomotivo.MER.Alimentacao", "Alimentacao")
                        .WithMany("Carros")
                        .HasForeignKey("AlimentacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogoAutomotivo.MER.Aspiracao", "Aspiracao")
                        .WithMany("Carros")
                        .HasForeignKey("AspiracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogoAutomotivo.MER.Categoria", "Categoria")
                        .WithMany("Carros")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogoAutomotivo.MER.Combustivel", "Combustivel")
                        .WithMany("Carros")
                        .HasForeignKey("CombustivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogoAutomotivo.MER.Fabricante", "Fabricante")
                        .WithMany("Carros")
                        .HasForeignKey("FabricanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogoAutomotivo.MER.Tracao", "Tracao")
                        .WithMany("Carros")
                        .HasForeignKey("TracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogoAutomotivo.MER.Transmissao", "Transmissao")
                        .WithMany("Carros")
                        .HasForeignKey("TransmissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimentacao");

                    b.Navigation("Aspiracao");

                    b.Navigation("Categoria");

                    b.Navigation("Combustivel");

                    b.Navigation("Fabricante");

                    b.Navigation("Tracao");

                    b.Navigation("Transmissao");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Alimentacao", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Aspiracao", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Categoria", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Combustivel", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Fabricante", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Tracao", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("CatalogoAutomotivo.MER.Transmissao", b =>
                {
                    b.Navigation("Carros");
                });
#pragma warning restore 612, 618
        }
    }
}
